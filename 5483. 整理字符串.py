"""
[5483. 整理字符串](https://leetcode-cn.com/problems/make-the-string-great/)
给你一个由大小写英文字母组成的字符串 s 。

一个整理好的字符串中，两个相邻字符 s[i] 和 s[i + 1] 不会同时满足下述条件：

0 <= i <= s.length - 2
s[i] 是小写字符，但 s[i + 1] 是相同的大写字符；反之亦然 。
请你将字符串整理好，每次你都可以从字符串中选出满足上述条件的 两个相邻 字符并删除，直到字符串整理好为止。

请返回整理好的 字符串 。题目保证在给出的约束条件下，测试样例对应的答案是唯一的。

注意：空字符串也属于整理好的字符串，尽管其中没有任何字符。

 

示例 1：

输入：s = "leEeetcode"
输出："leetcode"
解释：无论你第一次选的是 i = 1 还是 i = 2，都会使 "leEeetcode" 缩减为 "leetcode" 。
示例 2：

输入：s = "abBAcC"
输出：""
解释：存在多种不同情况，但所有的情况都会导致相同的结果。例如：
"abBAcC" --> "aAcC" --> "cC" --> ""
"abBAcC" --> "abBA" --> "aA" --> ""
示例 3：

输入：s = "s"
输出："s"
 

提示：

1 <= s.length <= 100
s 只包含小写和大写英文字母
***
思路：
从第一个开始遍历，如果当前字符和下一个字符属于大小写关系，那么就删除这两个字符，**索引移动到上一位**，继续判断。

索引移动到上一位是因为有可能存在AbBa，当中间bB被删除之后，光标便道了Aa中的a上面，所以每次消除一对字符的时候，光标都要回退一位。
"""

```python
class Solution:
    def makeGood(self, s: str) -> str:
        # print(ord('a'))
        if not s: return ""
        i = 0
        n = len(s)
        while i < n - 1:
            if abs(ord(s[i]) - ord(s[i+1])) == 32:#比较两个数是否是大小写关系
                s = s[:i] + s[i+2:]#这里每次都对字符串进行了分割，所以不能使用for循环
                n -= 2#删除两个字符，对应总长度也要减2
                if i > 0:#光标大于0，且本次删除了两个字符，光标回退。
                    i -= 1
            else:#本次不匹配。加一，继续检查
                i += 1
        return s
```
