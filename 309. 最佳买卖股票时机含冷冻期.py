"""
309. 最佳买卖股票时机含冷冻期
给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。​

设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:

你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
示例:

输入: [1,2,3,0,2]
输出: 3 
解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]

dp[i][0]持有股票
dp[i][1]未持股票，处于冷冻期
dp[i][2]

对于 f[i][0]，我们目前持有的这一支股票可以是在第 i-1天就已经持有的，对应的状态为 f[i-1][0]；或者是第 i 天买入的，
那么第 i-1天就不能持有股票并且不处于冷冻期中，对应的状态为 f[i-1][2]加上买入股票的负收益 prices[i]。因此状态转移方程为：

f[i][0]=max(f[i−1][0],f[i−1][2]−prices[i])

对于 f[i][1]，我们在第 ii 天结束之后处于冷冻期的原因是在当天卖出了股票，那么说明在第 i-1i−1 天时我们必须持有一支股票，
对应的状态为 f[i-1][0]加上卖出股票的正收益prices[i]。因此状态转移方程为：

f[i][1]=f[i−1][0]+prices[i]

对于 f[i][2]，我们在第 i 天结束之后不持有任何股票并且不处于冷冻期，说明当天没有进行任何操作，
即第 i-1 天时不持有任何股票：如果处于冷冻期，对应的状态为 f[i-1][1]；如果不处于冷冻期，对应的状态为 f[i-1][2]。因此状态转移方程为：

f[i][2]=max(f[i−1][1],f[i−1][2])

这样我们就得到了所有的状态转移方程。如果一共有 n 天，那么最终的答案即为：

max(f[n−1][0],f[n−1][1],f[n−1][2])

注意到如果在最后一天（第 n-1n−1 天）结束之后，手上仍然持有股票，那么显然是没有任何意义的。因此更加精确地，最终的答案实际上是 f[n-1][1]和 f[n-1][2]中的较大值，即：

max(f[n−1][1],f[n−1][2])
"""
from typing import List
#动态规划的方法
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        count = len(prices)
        if not prices: return 0
        dp = [[0] * 3 for _ in range(count)]
        dp[0][0] = -prices[0]
        res = 0
        for i in range(1, count):
            dp[i][0] = max(dp[i-1][0], dp[i-1][2] - prices[i])#当前持有股票，可能是今天买的，或者昨天已经有的
            dp[i][1] = dp[i-1][0] + prices[i]#当前未持有股票，处于冷冻期
            dp[i][2] = max(dp[i-1][2], dp[i-1][1])#当前未持有股票，不处于冷冻期
        # print(dp)
        return max(dp[-1][1],dp[-1][2])


if __name__ == "__main__":
    s = Solution()
    print(s.maxProfit([]))