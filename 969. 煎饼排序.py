"""
[969. 煎饼排序](https://leetcode-cn.com/problems/pancake-sorting/)
给定数组 A，我们可以对其进行煎饼翻转：我们选择一些正整数 k <= A.length，然后反转 A 的前 k 个元素的顺序。我们要执行零次或多次煎饼翻转（按顺序一次接一次地进行）以完成对数组 A 的排序。

返回能使 A 排序的煎饼翻转操作所对应的 k 值序列。任何将数组排序且翻转次数在 10 * A.length 范围内的有效答案都将被判断为正确。

 

示例 1：

输入：[3,2,4,1]
输出：[4,2,4,3]
解释：
我们执行 4 次煎饼翻转，k 值分别为 4，2，4，和 3。
初始状态 A = [3, 2, 4, 1]
第一次翻转后 (k=4): A = [1, 4, 2, 3]
第二次翻转后 (k=2): A = [4, 1, 2, 3]
第三次翻转后 (k=4): A = [3, 2, 1, 4]
第四次翻转后 (k=3): A = [1, 2, 3, 4]，此时已完成排序。 
示例 2：

输入：[1,2,3]
输出：[]
解释：
输入已经排序，因此不需要翻转任何内容。
请注意，其他可能的答案，如[3，3]，也将被接受。
***
例如[1,2,5,4,3]

 1. 找到5的索引，2，翻转。[5,2,1,4,3]
 2. 再整个翻转，把5放在最后，[3,4,1,2,5]。此时，可以发现规律：**5前面的数还是再5的前面，5后面的数翻转了一下，放在了首部。
 3. 所以可以根据这个给规律，进行规律翻转
"""
```python
class Solution:
    def pancakeSort(self, A: List[int]) -> List[int]:
        n = len(A)
        res = []
        for i in range(n, 1, -1):
            index = A.index(i)#找到当前最大值的索引
            A = A[index+1:i][::-1] + A[:index] +[i] + A[i:]#将最大值放在尾部，按照规律翻转
            res += [index+1, i]#每次操作是两个步骤，并且数字的索引还要加一
        return res
```
