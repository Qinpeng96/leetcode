"""
[696. 计数二进制子串](https://leetcode-cn.com/problems/count-binary-substrings/)
给定一个字符串 s，计算具有相同数量0和1的非空(连续)子字符串的数量，并且这些子字符串中的所有0和所有1都是组合在一起的。

重复出现的子串要计算它们出现的次数。

示例 1 :

输入: "00110011"
输出: 6
解释: 有6个子串具有相同数量的连续1和0：“0011”，“01”，“1100”，“10”，“0011” 和 “01”。

请注意，一些重复出现的子串要计算它们出现的次数。

另外，“00110011”不是有效的子串，因为所有的0（和1）没有组合在一起。
示例 2 :

输入: "10101"
输出: 4
解释: 有4个子串：“10”，“01”，“10”，“01”，它们具有相同数量的连续1和0。
注意：

s.length 在1到50,000之间。
s 只包含“0”或“1”字符。
***
想了位运算，结果没弄出来，一看答案是统计连续的频数，然后再从频数数组中去两个相邻频数的最小值，加入到输出。
"""
```python
class Solution:
    def countBinarySubstrings(self, s: str) -> int:
        s += '#'#加一个结尾符号，统计最后一个字频
        n = len(s)
        count = []
        cnt = 1
        
        for i in range(1,n):#如果当前值和之前的值相同，频数加一
            if s[i] == s[i-1]:
                cnt += 1
            else:#相邻频数不同，加入之前的频数
                count.append(cnt)
                cnt = 1
        out = 0
        # print(count)
        for i in range(1, len(count)):#计算两个频数之间的最小值
            out += min(count[i],count[i-1])
        
        return out
```
