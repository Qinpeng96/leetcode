"""
121. 买卖股票的最佳时机
给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。

注意：你不能在买入股票前卖出股票。

 

示例 1:

输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。
示例 2:

输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。

首先，我们可以一遍循环就找出最大的收益，建立一个dp列表，长度和输入一样长（其实可以只使用两位就可以），
当第 i 天的价格比第 i-1 天高的时候，我们的收益肯定是正向增加的，收益 = （第 i 天价格 - 第 i-1 天价格）+ 第 i-1 天的收益。
即 dp[i] = dp[i-1] + p[i] - p[i-1].

如果第i天的价格低于第i-1天的价格，这时候有两种情况，如果此时卖出，第i 天的收益还为正数，就赋值给第i天的收益，如果收益小于0，赋值为0。
————————————————
版权声明：本文为CSDN博主「Qin酱」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/qq_38650028/article/details/107244778

"""
from typing import List
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        count = len(prices)
        dp = [0] * count
        res = 0
        for i in range(1, count):
            if prices[i] - prices[i-1] + dp[i-1] > 0:
                dp[i] = dp[i-1] + prices[i] - prices[i-1]
            else:
                dp[i] = 0
            res = max(res, dp[i])
        # print(dp)
        return res






if __name__ == "__main__":
    s = Solution()
    print(s.maxProfit([7,1,5,3,6,4]))


