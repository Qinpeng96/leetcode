"""
134. 加油站
在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i] 升。

你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。

如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。

说明: 

如果题目有解，该答案即为唯一答案。
输入数组均为非空数组，且长度相同。
输入数组中的元素均为非负数。
示例 1:

输入: 
gas  = [1,2,3,4,5]
cost = [3,4,5,1,2]

输出: 3

解释:
从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油
开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油
开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油
开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油
开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油
开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。
因此，3 可为起始索引。
示例 2:

输入: 
gas  = [2,3,4]
cost = [3,4,3]

输出: -1

解释:
你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。
我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油
开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油
开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油
你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。
因此，无论怎样，你都不可能绕环路行驶一周。

"""

from typing import List
#使用两次遍历求解，效率不高
"""
这道题理清楚之后还是挺简单的，我们可以把两个数组看作是一个数组，每个元素等于gos-cost 这道题有两个条件非常重要，
只能向右行走，2、每个元素向右行走的耗油量和得到油的量一开始就知道 我们可以得出，
1、只能从两者相减大于0的坐标作为起始点，
2、第一个起始点之前的负的要累加起来，如果起始点到后面累加和再加上前面的负数和大于0，那么就可以走一圈。
3、如果起始点的累加和小于0.那么就要换下一个大于0的起始点，如果没有，那么一定不能走一圈。
"""
class Solution:
    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        dis = len(gas)
        res = []
        start = []
        cnt, fuel = 0, 0

        for i in range(dis):
            temp = gas[i] - cost[i]
            res.append(gas[i] - cost[i])
            if temp >= 0: start.append(i)

        for i in start:
            cnt, fuel = 0, 0
            while cnt < dis:
                fuel += res[i]
                i = (i+1) % dis
                cnt += 1
                if fuel < 0:
                    break
                if cnt == dis:
                    return i
        return -1
#只需要一次遍历即可
"""
问题1: 为什么应该将起始站点设为k+1？

因为k->k+1站耗油太大，0->k站剩余油量都是不为负的，每减少一站，就少了一些剩余油量。所以如果从k前面的站点作为起始站，剩余油量不可能冲过k+1站。

问题2: 为什么如果k+1->end全部可以正常通行，且rest>=0就可以说明车子从k+1站点出发可以开完全程？

因为，起始点将当前路径分为A、B两部分。其中，必然有(1)A部分剩余油量<0。(2)B部分剩余油量>0。

所以，无论多少个站，都可以抽象为两个站点（A、B）。(1)从B站加满油出发，(2)开往A站，车加油，(3)再开回B站的过程。

重点：B剩余的油>=A缺少的总油。必然可以推出，B剩余的油>=A站点的每个子站点缺少的油。

"""


class Solution:
    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        dis = len(gas)
        cnt, fuel = 0, 0
        start = 0
        for i in range(dis):
            fuel += gas[i] - cost[i]#汽车内的总燃油量
            cnt += gas[i] - cost[i]#经过的加油站和里程消耗，用于看是否有解
            if fuel < 0: #如果当前车子不能走到下一个站，那么以下一个加油站作为起始点
                start = i + 1
                fuel = 0
        return -1 if cnt < 0 else start#根据是否有解输出



if __name__ == "__main__":
    s = Solution()
    gas = [5,1,2,3,4]
    cost = [4,4,1,5,1]
    print(s.canCompleteCircuit(gas, cost))
    